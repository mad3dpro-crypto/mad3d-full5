// Full-featured frontend for MAD 3D STL/OBJ avatar app
import React, { useState, useEffect, Suspense, useRef } from 'react';
import { Canvas, useFrame } from '@react-three/fiber';
import { OrbitControls, PerspectiveCamera } from '@react-three/drei';
import { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';
import { OBJExporter } from 'three/examples/jsm/exporters/OBJExporter.js';
import * as THREE from 'three';

function ModelViewer({ modelUrl }) {
  const groupRef = useRef();

  useFrame(() => {
    if (groupRef.current) {
      groupRef.current.rotation.y += 0.002;
    }
  });

  return (
    <group ref={groupRef}>
      <Suspense fallback={null}>
        <Model url={modelUrl} />
      </Suspense>
    </group>
  );
}

function Model({ url }) {
  const gltf = useLoader(GLTFLoader, url);
  return <primitive object={gltf.scene} scale={0.5} />;
}

export default function MAD3DApp() {
  const [prompt, setPrompt] = useState('');
  const [email, setEmail] = useState('');
  const [quote, setQuote] = useState(null);
  const [previewId, setPreviewId] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);
  const [success, setSuccess] = useState(false);
  const [modelUrl, setModelUrl] = useState(null);
  const [dimensions, setDimensions] = useState({ length: 25, width: 12, height: 25 });
  const sceneRef = useRef();

  const API_BASE = process.env.REACT_APP_API_URL || 'http://localhost:4000';

  const getQuote = async () => {
    setLoading(true);
    setError(null);
    try {
      const res = await fetch(`${API_BASE}/api/generate-stl-preview`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ prompt, userEmail: email })
      });
      if (!res.ok) throw new Error('Server responded with an error.');
      const data = await res.json();
      setPreviewId(data.previewId);
      setQuote(data.estimatedCost);
      setModelUrl(`${API_BASE}/stls/${data.previewId}.glb`);
    } catch (err) {
      setError('Failed to connect to server. Please try again later.');
    } finally {
      setLoading(false);
    }
  };

  const startCheckout = async () => {
    setError(null);
    try {
      const res = await fetch(`${API_BASE}/api/checkout-session`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ previewId, estimatedCost: quote })
      });
      if (!res.ok) throw new Error('Checkout session creation failed.');
      const data = await res.json();
      window.location.href = data.checkoutUrl;
    } catch (err) {
      setError('Could not initiate payment. Please try again.');
    }
  };

  const exportAsOBJ = () => {
    if (!sceneRef.current) return;
    const exporter = new OBJExporter();
    const obj = exporter.parse(sceneRef.current);
    const blob = new Blob([obj], { type: 'text/plain' });
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = 'avatar.obj';
    link.click();
  };

  useEffect(() => {
    const urlParams = new URLSearchParams(window.location.search);
    if (urlParams.get('paid') === 'true') {
      setSuccess(true);
    }
  }, []);

  return (
    <div className="max-w-4xl mx-auto p-6">
      <h1 className="text-3xl font-bold text-sky-700 mb-4">MAD 3D: Custom Avatar Builder</h1>

      <input
        type="email"
        placeholder="Your Email"
        className="w-full p-2 border mb-3 rounded"
        value={email}
        onChange={(e) => setEmail(e.target.value)}
      />
      <textarea
        placeholder="Describe your avatar..."
        className="w-full p-2 border mb-3 rounded"
        rows="4"
        value={prompt}
        onChange={(e) => setPrompt(e.target.value)}
      />

      <div className="grid grid-cols-3 gap-3 mb-3">
        <input type="number" placeholder="Length (mm)" className="border p-2 rounded"
          value={dimensions.length} onChange={(e) => setDimensions({ ...dimensions, length: e.target.value })} />
        <input type="number" placeholder="Width (mm)" className="border p-2 rounded"
          value={dimensions.width} onChange={(e) => setDimensions({ ...dimensions, width: e.target.value })} />
        <input type="number" placeholder="Height (mm)" className="border p-2 rounded"
          value={dimensions.height} onChange={(e) => setDimensions({ ...dimensions, height: e.target.value })} />
      </div>

      <button
        onClick={getQuote}
        className="bg-sky-600 text-white px-4 py-2 rounded"
        disabled={!prompt || !email || loading}
      >
        {loading ? 'Generating...' : 'Get Quote'}
      </button>

      {error && <p className="text-red-600 mt-4">{error}</p>}
      {success && <p className="text-green-700 font-semibold mt-4">âœ… Payment successful! Your file will be emailed to you.</p>}

      {quote && (
        <div className="mt-6">
          <p className="text-xl">ðŸ’¸ Estimated Cost: <strong>${quote}</strong></p>
          <button
            onClick={startCheckout}
            className="mt-4 bg-green-600 text-white px-4 py-2 rounded"
          >
            Proceed to Checkout
          </button>
        </div>
      )}

      {modelUrl && (
        <div className="mt-6">
          <div style={{ height: '400px' }}>
            <Canvas ref={sceneRef} shadows>
              <ambientLight intensity={0.5} />
              <pointLight position={[10, 10, 10]} />
              <PerspectiveCamera makeDefault position={[0, 2, 5]} />
              <OrbitControls />
              <ModelViewer modelUrl={modelUrl} />
            </Canvas>
          </div>
          <button
            className="mt-4 bg-indigo-600 text-white px-4 py-2 rounded"
            onClick={exportAsOBJ}
          >
            Download as OBJ
          </button>
        </div>
      )}
    </div>
  );
}
